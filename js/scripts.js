"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();!function(){var t=function(){function t(e){_classCallCheck(this,t),this.alert=e,this.alert.querySelector(".alert__close").addEventListener("click",this.close.bind(this)),this.alert.close=this.close.bind(this),this.alert.open=this.open.bind(this),this.status=!1}return _createClass(t,[{key:"close",value:function(){var t=this;this.status&&(Velocity(this.alert,"finish"),Velocity(this.alert,{translateY:0},{duration:250,complete:function(){t.status=!1}}))}},{key:"open",value:function(){var t=this;this.status||(Velocity(this.alert,"finish"),Velocity(this.alert,{translateY:this.alert.offsetHeight+"px"},{duration:250,complete:function(){t.status=!0}}))}}]),t}(),e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(function(){[].forEach.call(document.querySelectorAll(".alert"),function(e){new t(e),e.classList.contains("alert_open")&&e.open()})})}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){this.map=document.querySelector(".contact__map"),null!=this.map&&(this.map.style.height=Math.max(document.documentElement.clientHeight,window.innerHeight||0)-document.querySelector(".contact__wrapper").offsetHeight-document.querySelector(".footer").offsetHeight-document.querySelector(".header").offsetHeight-52+"px",window.addEventListener("resize",this.resize.bind(this)))}},{key:"resize",value:function(){null!=this.map&&(this.map.style.height=Math.max(document.documentElement.clientHeight,window.innerHeight||0)-document.querySelector(".contact__wrapper").offsetHeight-document.querySelector(".footer").offsetHeight-document.querySelector(".header").offsetHeight-52+"px")}}]),e}();new e}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;if(null!=document.querySelector(".landing")){this.fired=!1,this.tablet=1200,this.mobile=750,this.min_height=250,this.meta=document.querySelector("meta[name='viewport']"),this.onResize();var t=document.querySelector(".header"),i=document.querySelector(".clock");document.querySelector(".slide_main");window.requestAnimFrame=window.requestAnimationFrame,$(".landing").fullpage({sectionSelector:".landing__section",navigation:!0,afterLoad:this.hideLoader.bind(this),afterRender:this.recountSlides.bind(this),afterResize:this.recountSlides.bind(this),onLeave:function(s,o,n){1==o?(t.classList.toggle("header_open",!1),e.hideNav()):(t.classList.toggle("header_open",!0),e.showNav()),6==o?i.classList.toggle("clock_visible",!0):i.classList.toggle("clock_visible",!1)}}),document.querySelector(".footer__top").addEventListener("click",this.scrollToTop.bind(this)),window.addEventListener("resize",this.onResize.bind(this));var s=document.querySelector(".landing__section.active");null!=s&&(s.classList.toggle("active_moment",!0),s.classList.toggle("active",!1),setTimeout(function(){s.classList.toggle("active_moment",!1),s.classList.toggle("active",!0)},0))}}},{key:"onResize",value:function(){Math.max(document.documentElement.clientHeight,window.innerHeight||0)>420&&Math.max(document.documentElement.clientWidth,window.innerWidth||0)<500?this.meta.setAttribute("content","width=400"):this.meta.setAttribute("content","width=device-width, initial-scale=1.0")}},{key:"hideNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:0},{duration:300,complete:function(){e.nav.style.display="none"}})}},{key:"showNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:1},{duration:300,begin:function(){e.nav.style.display="block"}})}},{key:"hideLoader",value:function(){if(this.onResize(),!this.fired){this.fired=!0,this.nav=document.getElementById("fp-nav"),this.hideNav(),[].forEach.call(document.querySelectorAll(".slide__resizable, .slide__centred"),function(e){e.setAttribute("data-height",e.offsetHeight),e.setAttribute("data-width",e.offsetWidth)});var e=document.querySelector(".loader__wrapper"),t={opacity:0},i={duration:500,complete:function(){e.parentNode.removeChild(e)}};Velocity(e,t,i)}}},{key:"recountSlides",value:function(){var e=this;this.onResize();var t=document.querySelectorAll(".slide__resizable"),i=document.querySelector(".slide__centred"),s=document.querySelectorAll(".steps__step"),o=document.querySelector(".slide_service"),n=document.querySelector(".slide__illustration"),l=document.querySelector(".slide_main"),r=document.querySelector(".shema"),a=document.querySelector(".header").offsetHeight,d=document.querySelector(".footer").offsetHeight,c=(r.closest(".slide__details"),l.querySelector(".slide__phones")),h=l.querySelector(".slide__phone"),u=void 0,f=void 0,m=void 0,v=void 0,y=20,g=void 0,_=void 0,p=1,b=1,L=1,S=void 0,w=void 0,q=void 0,z=void 0,M=void 0,A=void 0,x=void 0,k=void 0,H=void 0,C=void 0,E=void 0,I=void 0,W=void 0,R=void 0;g=l.querySelector(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,S=l.querySelector(".slide__header"),l.style.backgroundSize="auto "+u+"px",f>750?(W=0,_=550):(W=100,_=480),v=u-W-S.offsetHeight,v>=200&&f>750?(c.style.height=Math.min(v,_)+"px",c.style.marginLeft=.1*-Math.min(v,_)+"px",c.style.visibility="visible"):200>v?c.style.visibility="hidden":c.removeAttribute("style"),750>=f&&(h.style.height=v+"px"),g=o.querySelector(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,S=o.querySelector(".slide__header"),H=Math.min(g.offsetHeight,parseInt(g.style.height,10))-S.offsetHeight-d-a,n.style.height=H+"px",C=700,E=570,I=1.2*f,R=E*I/C,H>R?(n.classList.toggle("slide__illustration_hidden",!1),n.style.backgroundPosition="50% 100%"):370>H?n.classList.toggle("slide__illustration_hidden",!0):(n.classList.toggle("slide__illustration_hidden",!1),n.style.backgroundPosition="50% 0"),i.removeAttribute("style"),[].forEach.call(s,function(e){e.removeAttribute("style")}),Math.max(document.documentElement.clientHeight,window.innerHeight||0)>480&&(w=i.closest(".slide"),g=i.closest(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,k=parseInt(i.getAttribute("data-height"),10),f>1220?(x=1230,z=170):f>750&&1220>=f?(x=1050,z=170):(x=400,k=900,z=0),v=u-a,m=f-40,b=v/k,L=m/x,p=Math.min(Math.min(b,L),1),M=0,A=0,750>f?(p=v/620,i.style[Modernizr.prefixed("transform")]="translateX(-50%) scale("+p+")"):(x>m&&(A=-(x-f)/2),1>p&&([].forEach.call(s,function(e){e.style[Modernizr.prefixed("transform")]="scale("+Math.min(1/p*.8,2)+")"}),A+=30),A+="px",i.style[Modernizr.prefixed("transform")]="translateX("+A+") translateY("+M+") scale("+p+")")),[].forEach.call(t,function(t){w=t.closest(".slide"),S=t.closest(".slide__details").querySelector(".slide__header"),g=t.closest(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,k=parseInt(t.getAttribute("data-height"),10),x=parseInt(t.getAttribute("data-width"),10),b=v/k,L=m/x,p=Math.min(b,L),f>e.mobile?(v=u-a-y,m=f/2-40,b=v/k,L=m/x,p=Math.min(b,L),v<e.min_height?w.classList.add("slide_hide-resizable"):1>p?(w.classList.remove("slide_hide-resizable"),t.style[Modernizr.prefixed("transform")]="scale("+p+")",w.classList.contains("slide_right")?(q=parseInt(t.getAttribute("data-width"),10)*p,S.style.borderLeftWidth=q+"px",f>e.tablet&&(t.style.marginRight=S.offsetWidth/2-q+"px")):(q=parseInt(t.getAttribute("data-width"),10)*p,S.style.borderRightWidth=q+"px",f>e.tablet&&(t.style.marginLeft=S.offsetWidth/2-q+"px"))):(w.classList.remove("slide_hide-resizable"),t.removeAttribute("style"),S.removeAttribute("style"))):(v=u-a-S.offsetHeight-60,m=f-40,b=v/k,L=m/x,p=Math.min(b,L),x>m?t.style.marginLeft=-((x-m)/2-20)+"px":t.style.marginLeft="auto",200>v?(console.log("hidding"),w.classList.add("slide_hide-resizable")):1>p?(w.classList.remove("slide_hide-resizable"),t.style[Modernizr.prefixed("transform")]="scale("+p+")"):(w.classList.remove("slide_hide-resizable"),t.removeAttribute("style"),S.removeAttribute("style")))}),this.onResize()}},{key:"scrollToTop",value:function(e){e.preventDefault(),$.fn.fullpage.moveTo(1,0)}}]),e}();new e}();
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,o,i){return o&&t(e.prototype,o),i&&t(e,i),e}}();!function(){var t=function(){function t(e){_classCallCheck(this,t),this.popup=e,e.querySelector(".popup__close").addEventListener("click",this.close.bind(this)),this.popup.close=this.close.bind(this),this.popup.open=this.open.bind(this),this.popup.show=this.show.bind(this),this.status=!1,this.jamping=!1}return _createClass(t,[{key:"show",value:function(){this.popup.style.display="block",this.popup.style[Modernizr.prefixed("transform")]="rotateX(0)",this.status=!0}},{key:"hide",value:function(){this.popup.style.display="none",this.popup.style[Modernizr.prefixed("transform")]="rotateX(180deg)",this.status=!1,Velocity(this.popup,"stop")}},{key:"close",value:function(){var t=this;this.jamping||this.status&&(Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"120deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!1}}))}},{key:"open",value:function(){var t=this;if(!this.jamping){if(this.status)return void this.jump();this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"0deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!0}}),Velocity(this.popup,{rotateX:"20deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"10deg"},200),Velocity(this.popup,{rotateX:"0deg"},{duration:175,complete:function(){t.jamping=!1}})}}},{key:"jump",value:function(){var t=this;this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"35deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"20deg"},200),Velocity(this.popup,{rotateX:"0deg"},175),Velocity(this.popup,{rotateX:"15deg"},250),Velocity(this.popup,{rotateX:"0deg"},{duration:225,complete:function(){t.jamping=!1}})}}]),t}(),e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(function(){[].forEach.call(document.querySelectorAll(".popup_browser"),function(e){new t(e)}),[].forEach.call(document.querySelectorAll(".popup_common"),function(e){new t(e),e.classList.contains("popup_open")&&e.open()})})}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}();!function(){var e=function(){function e(t){_classCallCheck(this,e),this.form=t,t.setAttribute("novalidate","novalidate"),t.addEventListener("submit",this.validate.bind(this)),t.validate=this.validate.bind(this),t.clear=this.clear.bind(this),this.messages={en:{required:"Required field",email:"Wrong email format",equal:"Password fields should be equal",unequal:"Languages shouldn't be equal",url:"Wrong url format"},ru:{required:"Поле обязательно для заполнения",email:"Проверьте формат email",equal:"Пароли должны совпадать",unequal:"Языки не должны совпадать",url:"Проверьте формат URL"}}}return _createClass(e,[{key:"clear",value:function(){for(var e=$(this.form).find("select"),t=e.length;t--;)null!=typeof e[t].select2?$(e[t]).select2("val",""):e[t].selectedIndex=0,[].forEach.call(e[t].querySelectorAll("option[value][disabled]"),function(e){e.removeAttribute("disabled")});this.form.reset(),setTimeout(function(){var e=document.querySelectorAll(".form-error"),t=document.querySelectorAll("[data-valid], [data-invalid]");[].forEach.call(e,function(e){e.parentNode.removeChild(e)}),[].forEach.call(t,function(e){e.removeAttribute("data-invalid"),e.removeAttribute("data-valid")})},100)}},{key:"addError",value:function(e,t,r){if(null==e.parentNode.querySelector('.form-error[data-type="'+r+'"]')){var a=document.createElement("P");a.appendChild(document.createTextNode(t)),a.classList.add("form-error"),a.setAttribute("data-type",r),e.parentNode.appendChild(a)}}},{key:"clearError",value:function(e,t){var r=e.parentNode.querySelector('.form-error[data-type="'+t+'"]');null!=r&&e.parentNode.removeChild(r)}},{key:"validate",value:function(e){var t=this;"undefined"==typeof e||e.currentTarget.hasAttribute("data-reload")||e.preventDefault();var r=!0,a=this.form.querySelectorAll("[data-equal]"),l=this.form.querySelectorAll("[data-unequal]"),o=this.form.querySelectorAll("[required]"),n=this.form.querySelectorAll('input[type="url"]'),i=this.form.querySelectorAll('input[type="email"]'),u=new RegExp("^(http|https|ftp)://([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9-]+.)*[a-zA-Z0-9-]+.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(/($|[a-zA-Z0-9.,?'\\+&amp;%$#=~_-]+))*$","i"),d=new RegExp("^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$");[].forEach.call(a,function(e){var a=t.form.querySelector(e.getAttribute("data-equal"));e.value.trim()!=a.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].equal,"equal")):t.clearError(e,"equal")}),[].forEach.call(l,function(e){var a=t.form.querySelector(e.getAttribute("data-unequal"));e.options[e.selectedIndex].value.trim()==a.options[a.selectedIndex].value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].unequal,"unequal")):t.clearError(e,"unequal")}),[].forEach.call(o,function(e){""===e.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].required,"required")):t.clearError(e,"required")}),[].forEach.call(n,function(e){e.value.trim().length>0&&u.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].url,"url")):t.clearError(e,"url")}),[].forEach.call(i,function(e){e.value.trim().length>0&&d.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].email,"email")):t.clearError(e,"email")});var c=Array.prototype.slice.call(a).concat(Array.prototype.slice.call(o),Array.prototype.slice.call(n),Array.prototype.slice.call(i));[].forEach.call(c,function(e){var t=e.parentNode.querySelector(".form-error");if(null!=t){var r=document.createAttribute("data-invalid");r.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(r),e.nextSibling.removeAttribute("data-valid")):(e.setAttributeNode(r),e.removeAttribute("data-valid"))}else{var a=document.createAttribute("data-valid");a.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(a),e.nextSibling.removeAttribute("data-invalid")):(e.setAttributeNode(a),e.removeAttribute("data-invalid"))}});var s=this.form.querySelectorAll(".form_error").length;return s>0&&(r=!1),r===!1&&"undefined"!=typeof e&&e.preventDefault(),r}}]),e}(),t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(function(){var t=document.querySelectorAll("form");[].forEach.call(t,function(t){new e(t)})})}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;if(null!=document.querySelector(".login")){var t=document.querySelectorAll(".login__back"),o=document.querySelectorAll(".login__login-button, .login_success .login__submit"),n=document.querySelectorAll(".menu__interpreter, .header__interpreter");this.menu_popup_open=!1,this.login_button=document.querySelector(".menu__login"),this.register_button=document.querySelector(".menu__register"),this.step1=document.querySelector(".login_register-step-1"),this.step1_form=document.querySelector(".login_register-step-1 form.login__form"),this.step2=document.querySelector(".login_register-step-2"),this.step2_form=document.querySelector(".login_register-step-2 form.login__form"),this.mobile_popup=document.querySelector(".popup_mobile"),this.mobile_popup_close=this.mobile_popup.querySelector(".popup__close"),this.wrapper=document.querySelector(".menu__wrapper"),this.header_register_button=document.querySelector(".header__link_register"),this.header_login_button=document.querySelector(".header__link_login"),this.recovery_button=document.querySelector(".login__password-recovery"),this.lightbox=document.querySelector("body>.lightbox"),this.login_popup=document.querySelector(".login_login"),this.recovery=document.querySelector(".login_recovery"),this.password=document.querySelector(".login_password"),this.recovery_form=this.recovery.querySelector(".login__form"),this.password_form=this.password.querySelector(".login__form"),this.error_message=document.querySelector(".alert_form-send-fail"),this.email=document.querySelector(".login_email"),this.success=document.querySelector(".login_success"),this.current=document.querySelector(".login_open"),this.last=[],this.login_button.addEventListener("click",this.openLoginForm.bind(this)),this.recovery_button.addEventListener("click",this.openRecovery.bind(this)),this.lightbox.addEventListener("click",this.closeAll.bind(this)),this.register_button.addEventListener("click",this.openRegister.bind(this)),this.header_login_button.addEventListener("click",this.openLoginOuter.bind(this)),this.header_register_button.addEventListener("click",this.openRegisterOuter.bind(this)),this.mobile_popup_close.addEventListener("click",this.closeMobilePopup.bind(this)),this.recovery_form.addEventListener("submit",this.sendData.bind(this)),this.password_form.addEventListener("submit",this.sendData.bind(this)),this.step1_form.addEventListener("submit",this.openNext.bind(this)),this.step2_form.addEventListener("submit",this.sendData.bind(this)),window.addEventListener("resize",this.reposPopup.bind(this)),$("select.language_from").select2(),$("select.language_to").select2(),$("select.language_location").select2(),this.language_from=document.querySelector(".language_from"),this.language_to=document.querySelector(".language_to"),this.language_location=document.querySelector(".language_location"),$(".login select.language_from").on("change",this.changeFromLanguage.bind(this)),[].forEach.call(document.querySelectorAll(".login"),function(e){e.style.visibility="visible"}),[].forEach.call(n,function(t){t.addEventListener("click",e.openMobilePopup.bind(e))}),[].forEach.call(t,function(t){t.addEventListener("click",e.goback.bind(e))}),[].forEach.call(o,function(t){t.addEventListener("click",e.openLoginInner.bind(e))}),this.WebRTCSupport=!document.documentElement.classList.contains("no-peerconnection"),this.WebRTCSupport||([].forEach.call(document.querySelectorAll("form.login__form input, form.login__form button, form.login__form select"),function(e){e.setAttribute("disabled","disabled")}),[].forEach.call(document.documentElement.querySelectorAll("form.login__form"),function(e){e.addEventListener("click",function(t){e.closest(".login").querySelector(".popup_browser").open()})}),[].forEach.call(document.querySelectorAll(".popup_browser"),function(t){e.showPopup(t)}))}}},{key:"changeFromLanguage",value:function(){var e=this.language_from.value,t=this.language_to.value;e===t&&(this.language_to.selectedIndex=0,$(this.language_to).select2("val","")),[].forEach.call(this.language_to.querySelectorAll("option[value][disabled]"),function(e){e.removeAttribute("disabled")}),[].forEach.call(this.language_to.querySelectorAll('option[value="'+e+'"]'),function(e){e.setAttribute("disabled","disabled")}),$(this.language_to).select2()}},{key:"openNext",value:function(e){e.preventDefault(),this.step1_data={from:$("select.language_from").select2("val"),to:$("select.language_to").select2("val"),location:$("select.language_location").select2("val")},0!=this.step1_form.validate()&&this.openForm(this.step2)}},{key:"reposPopup",value:function(e){this.menu_popup_open&&(this.mobile_popup.style[Modernizr.prefixed("transform")]="translateY("+this.mobile_popup.offsetHeight+"px)")}},{key:"closeMobilePopup",value:function(){var e=this;this.menu_popup_open&&(this.menu_popup_open=!1,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:0},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:1},{duration:250,begin:function(){e.mobile_popup_button.style.display="block"}}))}},{key:"openMobilePopup",value:function(){var e=this;this.menu_popup_open||(this.menu_popup_open=!0,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:this.mobile_popup.offsetHeight+"px"},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:0},{duration:250,complete:function(){e.mobile_popup_button.style.display="none"}}))}},{key:"showPopup",value:function(e){void 0!=e.show?e.show():setTimeout(this.showPopup.bind(this,e),50)}},{key:"openLoginOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.login_button.click()},800)}},{key:"openRegisterOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.register_button.click()},800)}},{key:"sendData",value:function(e){var t=this;e.preventDefault();var o=e.currentTarget;if(0!=o.validate())try{!function(){var e=4,n=200,i=void 0,l=new XMLHttpRequest,s=void 0,r=new FormData(o);null!=t.step1_data&&(r.append("from",t.step1_data.from),r.append("to",t.step1_data.to),r.append("location",t.step1_data.location),t.step1_data=null),s=new Promise(function(i,s){l.open("POST",o.getAttribute("action")),l.send(r),l.onreadystatechange=function(){l.readyState===e&&(setTimeout(function(){t.clearAll()},500),l.status===n?i():s({code:parseInt(l.status,10),message:l.statusText}))}}),i=o.hasAttribute("data-check")?t.showCheckMessage.bind(t):t.showSuccessMessage.bind(t),s.then(i)["catch"](t.showErrorMessage.bind(t)),t.step1Data=null}()}catch(n){console.log("error: ",n)}}},{key:"showCheckMessage",value:function(){this.openForm(this.email)}},{key:"showSuccessMessage",value:function(){this.last=new Array,this.openForm(this.success)}},{key:"openLoginInner",value:function(){this.openForm(this.login_popup)}},{key:"showErrorMessage",value:function(e){this.last=new Array,console.log(e.code,"Responce status code: "+e.code+". "+e.message+"."),this.error_message.open()}},{key:"goback",value:function(){this.openForm()}},{key:"emailHaveSend",value:function(){this.last=new Array,this.openForm(this.email)}},{key:"openRegisterInner",value:function(){this.openForm(this.step1)}},{key:"openRegister",value:function(){var e=this;$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var t={right:0},o={duration:250};Velocity(this.step1,t,o),this.current=this.step1,t={opacity:1},o={begin:function(){e.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,t,o)}},{key:"openRecovery",value:function(e){e.preventDefault(),this.WebRTCSupport&&this.openForm(this.recovery)}},{key:"openForm",value:function(e,t){$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);this.current.querySelector("form");if("undefined"==typeof e&&this.last.length>0)e=this.last.pop();else{if("undefined"==typeof e&&0==this.last.length)return void this.closeAll();1!=t&&this.last.push(this.current)}var o={right:-this.current.offsetWidth+"px"},n={duration:250};Velocity(this.current,o,n),o={right:0},n={duration:250},Velocity(e,o,n),this.current=e}},{key:"closeAll",value:function(){var e=this;$.fn.fullpage.setAllowScrolling(!0),$.fn.fullpage.setKeyboardScrolling(!0);var t={right:-this.current.offsetWidth+"px"},o={duration:250};Velocity(this.current,t,o),this.current=null,t={opacity:0},o={complete:function(){e.lightbox.style.display="none"},duration:250},Velocity(this.lightbox,t,o),setTimeout(function(){e.clearAll()},500)}},{key:"clearAll",value:function(){[].forEach.call(document.querySelectorAll("form"),function(e){e.clear()})}},{key:"openLoginForm",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var o={right:0},n={duration:250};Velocity(this.login_popup,o,n),this.current=this.login_popup,o={opacity:1},n={begin:function(){t.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,o,n)}}]),e}();new e}();
"use strict";function _classCallCheck(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function i(i,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(i,o.key,o)}}return function(e,n,o){return n&&i(e.prototype,n),o&&i(e,o),e}}();!function(){window.mobileAndTabletcheck=function(){var i=!1;return function(e){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(i=!0)}(navigator.userAgent||navigator.vendor||window.opera),i},window.isMobile={Android:function(){return/Android/i.test(navigator.userAgent)},BlackBerry:function(){return/BlackBerry/i.test(navigator.userAgent)},iOS:function(){return/iPhone|iPad|iPod/i.test(navigator.userAgent)},Windows:function(){return/IEMobile/i.test(navigator.userAgent)},any:function(){return isMobile.Android()||isMobile.BlackBerry()||isMobile.iOS()||isMobile.Windows()}};var i=function(){function i(){_classCallCheck(this,i);var e=new Promise(function(i,e){return"loading"!=document.readyState?i():void document.addEventListener("DOMContentLoaded",function(){return i()})});e.then(this.init.bind(this))}return _createClass(i,[{key:"init",value:function(){window.isMobile.Android()?document.body.parentNode.classList.add("android"):window.isMobile.iOS()?document.body.parentNode.classList.add("ios"):window.mobileAndTabletcheck()?document.body.parentNode.classList.add("unknown-mobile"):document.body.parentNode.classList.add("desktop")}}]),i}();new i}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsZXJ0L2FsZXJ0LmpzIiwiY29udGFjdC9jb250YWN0cy5qcyIsImxhbmRpbmcvbGFuZGluZy5qcyIsInBvcHVwL3BvcHVwLmpzIiwidmFsaWRhdG9yL3ZhbGlkYXRpb24uanMiLCJsb2dpbi9sb2dpbi5qcyIsImxheW91dC9sYXlvdXQuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJBbGVydCIsImFsZXJ0IiwidGhpcyIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2UiLCJiaW5kIiwib3BlbiIsInN0YXR1cyIsInZhbHVlIiwiX3RoaXMiLCJWZWxvY2l0eSIsInRyYW5zbGF0ZVkiLCJkdXJhdGlvbiIsImNvbXBsZXRlIiwiX3RoaXMyIiwib2Zmc2V0SGVpZ2h0IiwicmVhZHkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsInRoZW4iLCJmb3JFYWNoIiwiY2FsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIkNvbnRhY3RzIiwiaW5pdCIsIm1hcCIsInN0eWxlIiwiaGVpZ2h0IiwiTWF0aCIsIm1heCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsIndpbmRvdyIsImlubmVySGVpZ2h0IiwicmVzaXplIiwiTGFuZGdpbmciLCJmaXJlZCIsInRhYmxldCIsIm1vYmlsZSIsIm1pbl9oZWlnaHQiLCJtZXRhIiwib25SZXNpemUiLCJoZWFkZXIiLCJjbG9jayIsInJlcXVlc3RBbmltRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCIkIiwiZnVsbHBhZ2UiLCJzZWN0aW9uU2VsZWN0b3IiLCJuYXZpZ2F0aW9uIiwiYWZ0ZXJMb2FkIiwiaGlkZUxvYWRlciIsImFmdGVyUmVuZGVyIiwicmVjb3VudFNsaWRlcyIsImFmdGVyUmVzaXplIiwib25MZWF2ZSIsImluZGV4IiwibmV4dEluZGV4IiwiZGlyZWN0aW9uIiwidG9nZ2xlIiwiaGlkZU5hdiIsInNob3dOYXYiLCJzY3JvbGxUb1RvcCIsImFjdGl2ZSIsInNldFRpbWVvdXQiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJzZXRBdHRyaWJ1dGUiLCJuYXYiLCJvcGFjaXR5IiwiZGlzcGxheSIsIl90aGlzMyIsImJlZ2luIiwiZ2V0RWxlbWVudEJ5SWQiLCJyZXNpemFibGUiLCJvZmZzZXRXaWR0aCIsImxvYWRlciIsIm9wdGlvbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJfdGhpczQiLCJyZXNpemFibGVzIiwiY2VudHJlZCIsInN0ZXBzIiwic2VydmljZV9zbGlkZSIsInNlcnZpY2VfaWxsdXN0cmF0aW9uIiwibWFpbiIsInNoZW1hIiwiaGVhZGVyX2hlaWdodCIsImZvb3Rlcl9oZWlnaHQiLCJwaG9uZXMiLCJjbG9zZXN0IiwicGhvbmUiLCJ2aWV3cG9ydF9oZWlnaHQiLCJ1bmRlZmluZWQiLCJ2aWV3cG9ydF93aWR0aCIsImF2YWlsYWJhbGVfd2lkdGgiLCJhdmFpbGFiYWxlX2hlaWdodCIsImRlbHRhIiwiY2VsbCIsInNpemUiLCJzY2FsZSIsInNjYWxlX3giLCJzY2FsZV95Iiwic2xpZGUiLCJib3JkZXJfd2lkdGgiLCJkZWx0YV95IiwidHJfeSIsInRyX3giLCJlbGVtZW50X3dpZHRoIiwiZWxlbWVudF9oZWlnaHQiLCJpbGx1c3RyYXRpb25faGVpZ2h0Iiwid193aWR0aCIsIndfaGVpZ2h0IiwiaV93aWR0aCIsImRlbCIsImlfaGVpZ2h0IiwibWluIiwicGFyc2VJbnQiLCJiYWNrZ3JvdW5kU2l6ZSIsIm1hcmdpbkxlZnQiLCJ2aXNpYmlsaXR5IiwicmVtb3ZlQXR0cmlidXRlIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwic3RlcCIsImdldEF0dHJpYnV0ZSIsIk1vZGVybml6ciIsInByZWZpeGVkIiwiYWRkIiwicmVtb3ZlIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiY29uc29sZSIsImxvZyIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJmbiIsIm1vdmVUbyIsIlBvcHVwIiwicG9wdXAiLCJzaG93IiwiamFtcGluZyIsInJvdGF0ZVgiLCJqdW1wIiwiVmFsaWRhdGlvbiIsImZvcm0iLCJ2YWxpZGF0ZSIsImNsZWFyIiwibWVzc2FnZXMiLCJlbiIsInJlcXVpcmVkIiwiZW1haWwiLCJlcXVhbCIsInVuZXF1YWwiLCJ1cmwiLCJydSIsInNlbGVjdHMiLCJmaW5kIiwic2VsZWN0MiIsInNlbGVjdGVkSW5kZXgiLCJvcHRpb24iLCJyZXNldCIsImVycm9ycyIsImZpZWxkcyIsImVycm9yIiwiZmllbGQiLCJlbGVtZW50IiwibWVzc2FnZSIsInR5cGUiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImVyciIsImN1cnJlbnRUYXJnZXQiLCJoYXNBdHRyaWJ1dGUiLCJ2YWxpZCIsImVxdWFsX2ZpZWxkcyIsInVuZXF1YWxfZmllbGRzIiwicmVxdWlyZWRfZmllbGRzIiwidXJsX2ZpZWxkcyIsImVtYWlsX2ZpZWxkcyIsInVybF9yZWdleCIsIlJlZ0V4cCIsImVtYWlsX3JlZ2V4IiwidHJpbSIsImFkZEVycm9yIiwiYm9keSIsImNsZWFyRXJyb3IiLCJ0ZXN0IiwiYWxsX2ZpZWxkcyIsIkFycmF5Iiwic2xpY2UiLCJjb25jYXQiLCJpbnZhbGlkIiwiY3JlYXRlQXR0cmlidXRlIiwidGFnTmFtZSIsIm5leHRTaWJsaW5nIiwic2V0QXR0cmlidXRlTm9kZSIsIl92YWxpZCIsImVycm9yc19jb3VudCIsImZvcm1zIiwiTWVudSIsImJhY2tfYnV0dG9ucyIsImxvZ2luX2J1dHRvbnMiLCJtb2JpbGVfcG9wdXBfYnV0dG9ucyIsIm1lbnVfcG9wdXBfb3BlbiIsImxvZ2luX2J1dHRvbiIsInJlZ2lzdGVyX2J1dHRvbiIsInN0ZXAxIiwic3RlcDFfZm9ybSIsInN0ZXAyIiwic3RlcDJfZm9ybSIsIm1vYmlsZV9wb3B1cCIsIm1vYmlsZV9wb3B1cF9jbG9zZSIsIndyYXBwZXIiLCJoZWFkZXJfcmVnaXN0ZXJfYnV0dG9uIiwiaGVhZGVyX2xvZ2luX2J1dHRvbiIsInJlY292ZXJ5X2J1dHRvbiIsImxpZ2h0Ym94IiwibG9naW5fcG9wdXAiLCJyZWNvdmVyeSIsInBhc3N3b3JkIiwicmVjb3ZlcnlfZm9ybSIsInBhc3N3b3JkX2Zvcm0iLCJlcnJvcl9tZXNzYWdlIiwic3VjY2VzcyIsImN1cnJlbnQiLCJsYXN0Iiwib3BlbkxvZ2luRm9ybSIsIm9wZW5SZWNvdmVyeSIsImNsb3NlQWxsIiwib3BlblJlZ2lzdGVyIiwib3BlbkxvZ2luT3V0ZXIiLCJvcGVuUmVnaXN0ZXJPdXRlciIsImNsb3NlTW9iaWxlUG9wdXAiLCJzZW5kRGF0YSIsIm9wZW5OZXh0IiwicmVwb3NQb3B1cCIsImxhbmd1YWdlX2Zyb20iLCJsYW5ndWFnZV90byIsImxhbmd1YWdlX2xvY2F0aW9uIiwib24iLCJjaGFuZ2VGcm9tTGFuZ3VhZ2UiLCJidXR0b24iLCJvcGVuTW9iaWxlUG9wdXAiLCJnb2JhY2siLCJvcGVuTG9naW5Jbm5lciIsIldlYlJUQ1N1cHBvcnQiLCJzaG93UG9wdXAiLCJ2YWx1ZV9mcm9tIiwidmFsdWVfdG8iLCJ0b19lbmFibGUiLCJ0b19kaXNhYmxlIiwic3RlcDFfZGF0YSIsImZyb20iLCJ0byIsImxvY2F0aW9uIiwib3BlbkZvcm0iLCJtb2JpbGVfcG9wdXBfYnV0dG9uIiwiY2xpY2siLCJfdGhpczUiLCJfdGhpczYiLCJET05FIiwiT0siLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImxvYWRlZCIsImRhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJjbGVhckFsbCIsImNvZGUiLCJzdGF0dXNUZXh0Iiwic2hvd0NoZWNrTWVzc2FnZSIsInNob3dTdWNjZXNzTWVzc2FnZSIsInNob3dFcnJvck1lc3NhZ2UiLCJzdGVwMURhdGEiLCJyZWFzb24iLCJfdGhpczciLCJzZXRBbGxvd1Njcm9sbGluZyIsInNldEtleWJvYXJkU2Nyb2xsaW5nIiwicmlnaHQiLCJkb250X3NhdmUiLCJwb3AiLCJwdXNoIiwiX3RoaXM4IiwiX3RoaXM5IiwibW9iaWxlQW5kVGFibGV0Y2hlY2siLCJjaGVjayIsImEiLCJzdWJzdHIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsImlzTW9iaWxlIiwiQW5kcm9pZCIsIkJsYWNrQmVycnkiLCJpT1MiLCJXaW5kb3dzIiwiYW55IiwiTGF5b3V0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUlBLFNBQVNBLGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQUZoSCxHQUFJQyxjQUFlLFdBQWUsUUFBU0MsR0FBaUJDLEVBQVFDLEdBQVMsSUFBSyxHQUFJQyxHQUFJLEVBQUdBLEVBQUlELEVBQU1FLE9BQVFELElBQUssQ0FBRSxHQUFJRSxHQUFhSCxFQUFNQyxFQUFJRSxHQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxTQUFXRixLQUFZQSxFQUFXRyxVQUFXLEdBQU1DLE9BQU9DLGVBQWVULEVBQVFJLEVBQVdNLElBQUtOLElBQWlCLE1BQU8sVUFBVVIsRUFBYWUsRUFBWUMsR0FBaUosTUFBOUhELElBQVlaLEVBQWlCSCxFQUFZaUIsVUFBV0YsR0FBaUJDLEdBQWFiLEVBQWlCSCxFQUFhZ0IsR0FBcUJoQixPQURqaUIsV0FXSSxHQU5Na0IsR0FBSyxXQUtLLFFBTFZBLEdBS1dDLEdBUVRyQixnQkFBZ0JzQixLQWJs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UzRLLEtBQUs3RyxXQUFXekQsVUFBVTJHLElBQUksV0FDaENoRyxPQUFPMFEsU0FBU0csTUFDdkI5UixTQUFTNEssS0FBSzdHLFdBQVd6RCxVQUFVMkcsSUFBSSxPQUNoQ2hHLE9BQU9rUSx1QkFDZG5SLFNBQVM0SyxLQUFLN0csV0FBV3pELFVBQVUyRyxJQUFJLGtCQUV2Q2pILFNBQVM0SyxLQUFLN0csV0FBV3pELFVBQVUyRyxJQUFJLGVBeEI3Q2dMLElBNEJOLElBQUlBIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbihmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgUG9wdXBcbiAgICAgKi9cbiAgICBjbGFzcyBBbGVydCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkaW5nIGV2ZW50cyBhbmQgcHJvcGVydGllc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yIChhbGVydCkge1xuICAgICAgICAgICAgdGhpcy5hbGVydCA9IGFsZXJ0O1xuICAgICAgICAgICAgdGhpcy5hbGVydC5xdWVyeVNlbGVjdG9yKCcuYWxlcnRfX2Nsb3NlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5hbGVydC5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuYWxlcnQub3BlbiA9IHRoaXMub3Blbi5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsb3NlICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmFsZXJ0LCBcImZpbmlzaFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMuYWxlcnQsIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVZOiAwXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb3BlbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMuYWxlcnQsIFwiZmluaXNoXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5hbGVydCwge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVk6IHRoaXMuYWxlcnQub2Zmc2V0SGVpZ2h0ICsgXCJweFwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPSBcImxvYWRpbmdcIikgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCk9PiByZXNvbHZlKCkpO1xuICAgIH0pO1xuXG4gICAgcmVhZHkudGhlbigoKT0+e1xuICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFsZXJ0JyksIChhbGVydCkgPT4ge1xuICAgICAgICAgICAgbmV3IEFsZXJ0KGFsZXJ0KTtcbiAgICAgICAgICAgIGlmIChhbGVydC5jbGFzc0xpc3QuY29udGFpbnMoJ2FsZXJ0X29wZW4nKSl7XG4gICAgICAgICAgICAgICAgYWxlcnQub3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIENvbnRhY3RzIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdGFydCBpbml0aWFsaXphdGlvbiBvbiBkb21sb2FkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBsZXQgcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhZHkudGhlbih0aGlzLmluaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICB0aGlzLm1hcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWN0X19tYXAnKTtcbiAgICAgICAgICAgIGlmKHRoaXMubWFwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCkgLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFjdF9fd3JhcHBlcicpLm9mZnNldEhlaWdodCAtIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb290ZXInKS5vZmZzZXRIZWlnaHQgLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJykub2Zmc2V0SGVpZ2h0IC0gNTIgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzaXplICgpIHtcbiAgICAgICAgICAgIGlmKHRoaXMubWFwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCkgLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFjdF9fd3JhcHBlcicpLm9mZnNldEhlaWdodCAtIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb290ZXInKS5vZmZzZXRIZWlnaHQgLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJykub2Zmc2V0SGVpZ2h0IC0gNTIgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3IENvbnRhY3RzO1xufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIExhbmRnaW5nIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdGFydCBpbml0aWFsaXphdGlvbiBvbiBkb21sb2FkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBsZXQgcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhZHkudGhlbih0aGlzLmluaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXQoKSB7XG5cbiAgICAgICAgICAgIGlmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sYW5kaW5nJykgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5maXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50YWJsZXQgPSAxMjAwO1xuICAgICAgICAgICAgdGhpcy5tb2JpbGUgPSA3NTA7XG4gICAgICAgICAgICB0aGlzLm1pbl9oZWlnaHQgPSAyNTA7XG4gICAgICAgICAgICB0aGlzLm1ldGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPSd2aWV3cG9ydCddXCIpO1xuXG4gICAgICAgICAgICB0aGlzLm9uUmVzaXplKCk7XG5cbiAgICAgICAgICAgIGxldCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJylcbiAgICAgICAgICAgICAgICAsIGNsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsb2NrJylcbiAgICAgICAgICAgICAgICAsIG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVfbWFpbicpO1xuXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgICAgICAkKFwiLmxhbmRpbmdcIikuZnVsbHBhZ2Uoe1xuICAgICAgICAgICAgICAgIHNlY3Rpb25TZWxlY3RvcjogXCIubGFuZGluZ19fc2VjdGlvblwiLFxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgYWZ0ZXJMb2FkOiB0aGlzLmhpZGVMb2FkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBhZnRlclJlbmRlcjogdGhpcy5yZWNvdW50U2xpZGVzLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgYWZ0ZXJSZXNpemU6IHRoaXMucmVjb3VudFNsaWRlcy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIG9uTGVhdmU6IChpbmRleCwgbmV4dEluZGV4LCBkaXJlY3Rpb24pID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEluZGV4ID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXJfb3BlbicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZU5hdigpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLmNsYXNzTGlzdC50b2dnbGUoJ2hlYWRlcl9vcGVuJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dOYXYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0SW5kZXggPT0gNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2suY2xhc3NMaXN0LnRvZ2dsZSgnY2xvY2tfdmlzaWJsZScsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2suY2xhc3NMaXN0LnRvZ2dsZSgnY2xvY2tfdmlzaWJsZScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb290ZXJfX3RvcFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5zY3JvbGxUb1RvcC5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIGxldCBhY3RpdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGFuZGluZ19fc2VjdGlvbi5hY3RpdmUnKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmVfbW9tZW50JywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYWN0aXZlLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmVfbW9tZW50JywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIG9uUmVzaXplICgpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApID4gNDIwIClcbiAgICAgICAgICAgICAgICAmJiAoTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKSA8IDUwMClcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhLnNldEF0dHJpYnV0ZShcImNvbnRlbnRcIiwgXCJ3aWR0aD00MDBcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubWV0YS5zZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIsIFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGhpZGVOYXYgKCkge1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5uYXYsIFwiZmluaXNoXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5uYXYsIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMFxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93TmF2ICgpIHtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubmF2LCBcImZpbmlzaFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubmF2LCB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDBcbiAgICAgICAgICAgICAgICAsIGJlZ2luOiAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXYuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpZGVMb2FkZXIoKSB7XG4gICAgICAgICAgICB0aGlzLm9uUmVzaXplKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5maXJlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5uYXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnAtbmF2Jyk7XG4gICAgICAgICAgICB0aGlzLmhpZGVOYXYoKTtcblxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZV9fcmVzaXphYmxlLCAuc2xpZGVfX2NlbnRyZWQnKSwgKHJlc2l6YWJsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc2l6YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaGVpZ2h0JywgcmVzaXphYmxlLm9mZnNldEhlaWdodCk7XG4gICAgICAgICAgICAgICAgcmVzaXphYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS13aWR0aCcsIHJlc2l6YWJsZS5vZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkZXJfX3dyYXBwZXInKSxcbiAgICAgICAgICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxvYWRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBWZWxvY2l0eShsb2FkZXIsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmVjb3VudFNsaWRlcygpIHtcblxuICAgICAgICAgICAgdGhpcy5vblJlc2l6ZSgpO1xuXG4gICAgICAgICAgICBsZXQgcmVzaXphYmxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZV9fcmVzaXphYmxlJylcbiAgICAgICAgICAgICAgICAsIGNlbnRyZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVfX2NlbnRyZWQnKVxuICAgICAgICAgICAgICAgICwgc3RlcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc3RlcHNfX3N0ZXAnKVxuICAgICAgICAgICAgICAgICwgc2VydmljZV9zbGlkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZV9zZXJ2aWNlJylcbiAgICAgICAgICAgICAgICAsIHNlcnZpY2VfaWxsdXN0cmF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlX19pbGx1c3RyYXRpb24nKVxuICAgICAgICAgICAgICAgICwgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZV9tYWluJylcbiAgICAgICAgICAgICAgICAsIHNoZW1hID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoZW1hJylcbiAgICAgICAgICAgICAgICAsIGhlYWRlcl9oZWlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJykub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgLCBmb290ZXJfaGVpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvb3RlcicpLm9mZnNldEhlaWdodFxuICAgICAgICAgICAgICAgICwgc2hlbWFfZGV0YWlscyA9IHNoZW1hLmNsb3Nlc3QoJy5zbGlkZV9fZGV0YWlscycpXG4gICAgICAgICAgICAgICAgLCBwaG9uZXMgPSBtYWluLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZV9fcGhvbmVzJylcbiAgICAgICAgICAgICAgICAsIHBob25lID0gbWFpbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGVfX3Bob25lJylcbiAgICAgICAgICAgICAgICAsIHZpZXdwb3J0X2hlaWdodFxuICAgICAgICAgICAgICAgICwgdmlld3BvcnRfd2lkdGhcbiAgICAgICAgICAgICAgICAsIGF2YWlsYWJhbGVfd2lkdGhcbiAgICAgICAgICAgICAgICAsIGF2YWlsYWJhbGVfaGVpZ2h0XG4gICAgICAgICAgICAgICAgLCBkZWx0YSA9IDIwXG4gICAgICAgICAgICAgICAgLCBjZWxsXG4gICAgICAgICAgICAgICAgLCBzaXplXG4gICAgICAgICAgICAgICAgLCBzY2FsZSA9IDFcbiAgICAgICAgICAgICAgICAsIHNjYWxlX3ggPSAxXG4gICAgICAgICAgICAgICAgLCBzY2FsZV95ID0gMVxuICAgICAgICAgICAgICAgICwgaGVhZGVyXG4gICAgICAgICAgICAgICAgLCBzbGlkZVxuICAgICAgICAgICAgICAgICwgYm9yZGVyX3dpZHRoXG4gICAgICAgICAgICAgICAgLCBkZWx0YV95XG4gICAgICAgICAgICAgICAgLCB0cl95XG4gICAgICAgICAgICAgICAgLCB0cl94XG4gICAgICAgICAgICAgICAgLCBlbGVtZW50X3dpZHRoXG4gICAgICAgICAgICAgICAgLCBlbGVtZW50X2hlaWdodFxuICAgICAgICAgICAgICAgICwgaWxsdXN0cmF0aW9uX2hlaWdodFxuICAgICAgICAgICAgICAgICwgd193aWR0aFxuICAgICAgICAgICAgICAgICwgd19oZWlnaHRcbiAgICAgICAgICAgICAgICAsIGlfd2lkdGhcbiAgICAgICAgICAgICAgICAsIGRlbFxuICAgICAgICAgICAgICAgICwgaV9oZWlnaHQ7XG5cbiAgICAgICAgICAgIGNlbGwgPSBtYWluLnF1ZXJ5U2VsZWN0b3IoJy5mcC10YWJsZUNlbGwnKTtcbiAgICAgICAgICAgIHZpZXdwb3J0X2hlaWdodCA9IE1hdGgubWluKGNlbGwub2Zmc2V0SGVpZ2h0LCBwYXJzZUludChjZWxsLnN0eWxlLmhlaWdodCwgMTApKTtcbiAgICAgICAgICAgIHZpZXdwb3J0X3dpZHRoID0gY2VsbC5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgICAgaGVhZGVyID0gbWFpbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGVfX2hlYWRlcicpO1xuICAgICAgICAgICAgbWFpbi5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IFwiYXV0byBcIiArIHZpZXdwb3J0X2hlaWdodCArIFwicHhcIjtcblxuICAgICAgICAgICAgaWYgKHZpZXdwb3J0X3dpZHRoID4gNzUwKSB7XG4gICAgICAgICAgICAgICAgZGVsID0gMDtcbiAgICAgICAgICAgICAgICBzaXplID0gNTUwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWwgPSAxMDA7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IDQ4MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF2YWlsYWJhbGVfaGVpZ2h0ID0gdmlld3BvcnRfaGVpZ2h0IC0gZGVsIC0gaGVhZGVyLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChhdmFpbGFiYWxlX2hlaWdodCA+PSAyMDApXG4gICAgICAgICAgICAgICAgJiYgKHZpZXdwb3J0X3dpZHRoID4gNzUwKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcGhvbmVzLnN0eWxlLmhlaWdodCA9IE1hdGgubWluKGF2YWlsYWJhbGVfaGVpZ2h0LCBzaXplKSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBwaG9uZXMuc3R5bGUubWFyZ2luTGVmdCA9IC1NYXRoLm1pbihhdmFpbGFiYWxlX2hlaWdodCwgc2l6ZSkqMC4xICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHBob25lcy5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF2YWlsYWJhbGVfaGVpZ2h0IDwgMjAwICkge1xuICAgICAgICAgICAgICAgIHBob25lcy5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGhvbmVzLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAodmlld3BvcnRfd2lkdGggPD0gNzUwKSB7XG4gICAgICAgICAgICAgICAgcGhvbmUuc3R5bGUuaGVpZ2h0ID0gYXZhaWxhYmFsZV9oZWlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNlbGwgPSBzZXJ2aWNlX3NsaWRlLnF1ZXJ5U2VsZWN0b3IoJy5mcC10YWJsZUNlbGwnKTtcbiAgICAgICAgICAgIHZpZXdwb3J0X2hlaWdodCA9IE1hdGgubWluKGNlbGwub2Zmc2V0SGVpZ2h0LCBwYXJzZUludChjZWxsLnN0eWxlLmhlaWdodCwgMTApKTtcbiAgICAgICAgICAgIHZpZXdwb3J0X3dpZHRoID0gY2VsbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIGhlYWRlciA9IHNlcnZpY2Vfc2xpZGUucXVlcnlTZWxlY3RvcignLnNsaWRlX19oZWFkZXInKTtcbiAgICAgICAgICAgIGlsbHVzdHJhdGlvbl9oZWlnaHQgPSAoTWF0aC5taW4oY2VsbC5vZmZzZXRIZWlnaHQsIHBhcnNlSW50KGNlbGwuc3R5bGUuaGVpZ2h0LCAxMCkpIC0gaGVhZGVyLm9mZnNldEhlaWdodCAtIGZvb3Rlcl9oZWlnaHQgLSBoZWFkZXJfaGVpZ2h0KTtcbiAgICAgICAgICAgIHNlcnZpY2VfaWxsdXN0cmF0aW9uLnN0eWxlLmhlaWdodCA9IGlsbHVzdHJhdGlvbl9oZWlnaHQgKyBcInB4XCI7XG5cbiAgICAgICAgICAgIHdfd2lkdGggPSA3MDA7XG4gICAgICAgICAgICB3X2hlaWdodCA9IDU3MDtcbiAgICAgICAgICAgIGlfd2lkdGggPSB2aWV3cG9ydF93aWR0aCoxLjI7XG4gICAgICAgICAgICBpX2hlaWdodCA9IHdfaGVpZ2h0Kmlfd2lkdGgvd193aWR0aDtcblxuICAgICAgICAgICAgaWYgKGlfaGVpZ2h0IDwgaWxsdXN0cmF0aW9uX2hlaWdodCkge1xuICAgICAgICAgICAgICAgIHNlcnZpY2VfaWxsdXN0cmF0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ3NsaWRlX19pbGx1c3RyYXRpb25faGlkZGVuJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNlcnZpY2VfaWxsdXN0cmF0aW9uLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwiNTAlIDEwMCVcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWxsdXN0cmF0aW9uX2hlaWdodCA8IDM3MCkge1xuICAgICAgICAgICAgICAgIHNlcnZpY2VfaWxsdXN0cmF0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ3NsaWRlX19pbGx1c3RyYXRpb25faGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlcnZpY2VfaWxsdXN0cmF0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ3NsaWRlX19pbGx1c3RyYXRpb25faGlkZGVuJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNlcnZpY2VfaWxsdXN0cmF0aW9uLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwiNTAlIDBcIjtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvLyBDZW50cmVkIHN0eWxlXG5cbiAgICAgICAgICAgIC8vINCn0LjRgdGC0LjQvCDQstGB0LUg0YHRgtC40LvQuCDQv9GA0LjQstC90LXRgdC10L3QvdGL0LVcbiAgICAgICAgICAgIGNlbnRyZWQucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHN0ZXBzLCAoc3RlcCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0ZXAucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCkgPiA0ODAgKSB7XG5cbiAgICAgICAgICAgICAgICBzbGlkZSA9IGNlbnRyZWQuY2xvc2VzdCgnLnNsaWRlJyk7XG4gICAgICAgICAgICAgICAgY2VsbCA9IGNlbnRyZWQuY2xvc2VzdCgnLmZwLXRhYmxlQ2VsbCcpO1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0X2hlaWdodCA9IE1hdGgubWluKGNlbGwub2Zmc2V0SGVpZ2h0LCBwYXJzZUludChjZWxsLnN0eWxlLmhlaWdodCwgMTApKTtcbiAgICAgICAgICAgICAgICB2aWV3cG9ydF93aWR0aCA9IGNlbGwub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50X2hlaWdodCA9IHBhcnNlSW50KGNlbnRyZWQuZ2V0QXR0cmlidXRlKCdkYXRhLWhlaWdodCcpLDEwKTtcblxuICAgICAgICAgICAgICAgIGlmICh2aWV3cG9ydF93aWR0aCA+IDEyMjApe1xuICAgICAgICAgICAgICAgICAgICAvLyBkZXNrdG9wXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfd2lkdGggPSAxMjMwO1xuICAgICAgICAgICAgICAgICAgICBkZWx0YV95ID0gMTcwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHZpZXdwb3J0X3dpZHRoID4gNzUwKSAmJiAodmlld3BvcnRfd2lkdGggPD0gMTIyMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFibGV0XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfd2lkdGggPSAxMDUwO1xuICAgICAgICAgICAgICAgICAgICBkZWx0YV95ID0gMTcwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vYmlsZVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50X3dpZHRoID0gNDAwO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50X2hlaWdodCA9IDkwMDtcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFfeSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXZhaWxhYmFsZV9oZWlnaHQgPSB2aWV3cG9ydF9oZWlnaHQgLSBoZWFkZXJfaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGF2YWlsYWJhbGVfd2lkdGggPSB2aWV3cG9ydF93aWR0aCAtIDQwO1xuXG4gICAgICAgICAgICAgICAgc2NhbGVfeCA9IGF2YWlsYWJhbGVfaGVpZ2h0L2VsZW1lbnRfaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHNjYWxlX3kgPSBhdmFpbGFiYWxlX3dpZHRoL2VsZW1lbnRfd2lkdGg7XG4gICAgICAgICAgICAgICAgc2NhbGUgPSBNYXRoLm1pbihNYXRoLm1pbihzY2FsZV94LCBzY2FsZV95KSwxKTtcblxuICAgICAgICAgICAgICAgIHRyX3kgPSAwO1xuICAgICAgICAgICAgICAgIHRyX3ggPSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZpZXdwb3J0X3dpZHRoIDwgNzUwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vYmlsZVxuICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IGF2YWlsYWJhbGVfaGVpZ2h0LzYyMDtcbiAgICAgICAgICAgICAgICAgICAgY2VudHJlZC5zdHlsZVtNb2Rlcm5penIucHJlZml4ZWQoJ3RyYW5zZm9ybScpXSA9ICd0cmFuc2xhdGVYKC01MCUpIHNjYWxlKCcgKyBzY2FsZSArICcpJztcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBtb2JpbGVcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmFsZV93aWR0aCA8IGVsZW1lbnRfd2lkdGggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cl94ID0gLShlbGVtZW50X3dpZHRoIC0gdmlld3BvcnRfd2lkdGgpLzIgO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdXBzY2FsZSB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZTwxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoc3RlcHMsIChzdGVwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcC5zdHlsZVtNb2Rlcm5penIucHJlZml4ZWQoJ3RyYW5zZm9ybScpXSA9ICdzY2FsZSgnICsgTWF0aC5taW4oKDEvc2NhbGUpKjAuOCwgMikgKyAnKSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyX3ggKz0gMzA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0cl94ICs9ICdweCc7XG4gICAgICAgICAgICAgICAgICAgIGNlbnRyZWQuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKCd0cmFuc2Zvcm0nKV0gPSAndHJhbnNsYXRlWCgnICsgdHJfeCArICcpIHRyYW5zbGF0ZVkoJyArIHRyX3kgKyAnKSBzY2FsZSgnICsgc2NhbGUgKyAnKSc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHJlc2l6YWJsZXMsIChyZXNpemFibGUpID0+IHtcblxuICAgICAgICAgICAgICAgIHNsaWRlID0gcmVzaXphYmxlLmNsb3Nlc3QoJy5zbGlkZScpO1xuICAgICAgICAgICAgICAgIGhlYWRlciA9IHJlc2l6YWJsZS5jbG9zZXN0KCcuc2xpZGVfX2RldGFpbHMnKS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVfX2hlYWRlcicpO1xuICAgICAgICAgICAgICAgIGNlbGwgPSByZXNpemFibGUuY2xvc2VzdCgnLmZwLXRhYmxlQ2VsbCcpO1xuXG4gICAgICAgICAgICAgICAgdmlld3BvcnRfaGVpZ2h0ID0gTWF0aC5taW4oY2VsbC5vZmZzZXRIZWlnaHQsIHBhcnNlSW50KGNlbGwuc3R5bGUuaGVpZ2h0LCAxMCkpO1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0X3dpZHRoID0gY2VsbC5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnRfaGVpZ2h0ID0gcGFyc2VJbnQocmVzaXphYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS1oZWlnaHQnKSwxMCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudF93aWR0aCA9IHBhcnNlSW50KHJlc2l6YWJsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtd2lkdGgnKSwxMCk7XG5cbiAgICAgICAgICAgICAgICBzY2FsZV94ID0gYXZhaWxhYmFsZV9oZWlnaHQvZWxlbWVudF9oZWlnaHQ7XG4gICAgICAgICAgICAgICAgc2NhbGVfeSA9IGF2YWlsYWJhbGVfd2lkdGgvZWxlbWVudF93aWR0aDtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IE1hdGgubWluKHNjYWxlX3gsIHNjYWxlX3kpO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodmlld3BvcnRfd2lkdGggPiB0aGlzLm1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0YWJsZXQgYW5kIGRlc2t0b3AgcmVzb2x1dGlvblxuXG4gICAgICAgICAgICAgICAgICAgIGF2YWlsYWJhbGVfaGVpZ2h0ID0gdmlld3BvcnRfaGVpZ2h0IC0gaGVhZGVyX2hlaWdodCAtIGRlbHRhO1xuICAgICAgICAgICAgICAgICAgICBhdmFpbGFiYWxlX3dpZHRoID0gdmlld3BvcnRfd2lkdGgvMiAtIDQwO1xuXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlX3ggPSBhdmFpbGFiYWxlX2hlaWdodC9lbGVtZW50X2hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVfeSA9IGF2YWlsYWJhbGVfd2lkdGgvZWxlbWVudF93aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBNYXRoLm1pbihzY2FsZV94LCBzY2FsZV95KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggYXZhaWxhYmFsZV9oZWlnaHQgPCB0aGlzLm1pbl9oZWlnaHQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLmNsYXNzTGlzdC5hZGQoJ3NsaWRlX2hpZGUtcmVzaXphYmxlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc2NhbGUgPCAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZV9oaWRlLXJlc2l6YWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlLnN0eWxlW01vZGVybml6ci5wcmVmaXhlZCgndHJhbnNmb3JtJyldID0gJ3NjYWxlKCcgKyBzY2FsZSArICcpJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVfcmlnaHQnKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyX3dpZHRoID0gKHBhcnNlSW50KHJlc2l6YWJsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtd2lkdGgnKSwxMCkpKnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5zdHlsZS5ib3JkZXJMZWZ0V2lkdGggPSBib3JkZXJfd2lkdGggKyAncHgnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdwb3J0X3dpZHRoID4gdGhpcy50YWJsZXQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhYmxldCByZXNvbHV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZS5zdHlsZS5tYXJnaW5SaWdodCA9IChoZWFkZXIub2Zmc2V0V2lkdGgvMiAtIGJvcmRlcl93aWR0aCkgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJfd2lkdGggPSAocGFyc2VJbnQocmVzaXphYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS13aWR0aCcpLDEwKSkqc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLnN0eWxlLmJvcmRlclJpZ2h0V2lkdGggPSBib3JkZXJfd2lkdGggKyAncHgnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdwb3J0X3dpZHRoID4gdGhpcy50YWJsZXQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhYmxldCByZXNvbHV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZS5zdHlsZS5tYXJnaW5MZWZ0ID0gKGhlYWRlci5vZmZzZXRXaWR0aC8yIC0gYm9yZGVyX3dpZHRoKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZV9oaWRlLXJlc2l6YWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vYmlsZSByZXNvbHV0aW9uXG4gICAgICAgICAgICAgICAgICAgIGF2YWlsYWJhbGVfaGVpZ2h0ID0gdmlld3BvcnRfaGVpZ2h0IC0gaGVhZGVyX2hlaWdodCAtIGhlYWRlci5vZmZzZXRIZWlnaHQgLSA2MDtcbiAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmFsZV93aWR0aCA9IHZpZXdwb3J0X3dpZHRoIC0gNDA7XG5cbiAgICAgICAgICAgICAgICAgICAgc2NhbGVfeCA9IGF2YWlsYWJhbGVfaGVpZ2h0L2VsZW1lbnRfaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBzY2FsZV95ID0gYXZhaWxhYmFsZV93aWR0aC9lbGVtZW50X3dpZHRoO1xuICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IE1hdGgubWluKHNjYWxlX3gsIHNjYWxlX3kpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdmFpbGFiYWxlX3dpZHRoIDwgZWxlbWVudF93aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlLnN0eWxlLm1hcmdpbkxlZnQgPSAtICgoKGVsZW1lbnRfd2lkdGggLSBhdmFpbGFiYWxlX3dpZHRoKS8yKSAtIDIwKSArIFwicHhcIlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlLnN0eWxlLm1hcmdpbkxlZnQgPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiggYXZhaWxhYmFsZV9oZWlnaHQgPCAyMDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaGlkZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuY2xhc3NMaXN0LmFkZCgnc2xpZGVfaGlkZS1yZXNpemFibGUnKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBzY2FsZSA8IDEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlX2hpZGUtcmVzaXphYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNpemFibGUuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKCd0cmFuc2Zvcm0nKV0gPSAnc2NhbGUoJyArIHNjYWxlICsgJyknO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZV9oaWRlLXJlc2l6YWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm9uUmVzaXplKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHNjcm9sbFRvVG9wKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5tb3ZlVG8oMSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3IExhbmRnaW5nO1xufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuKGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBQb3B1cFxuICAgICAqL1xuICAgIGNsYXNzIFBvcHVwIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRpbmcgZXZlbnRzIGFuZCBwcm9wZXJ0aWVzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IgKHBvcHVwKSB7XG4gICAgICAgICAgICB0aGlzLnBvcHVwID0gcG9wdXA7XG4gICAgICAgICAgICBwb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucG9wdXAub3BlbiA9IHRoaXMub3Blbi5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5zaG93ID0gdGhpcy5zaG93LmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5qYW1waW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93ICgpIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKCd0cmFuc2Zvcm0nKV0gPSBcInJvdGF0ZVgoMClcIjtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpZGUgKCkge1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB0aGlzLnBvcHVwLnN0eWxlW01vZGVybml6ci5wcmVmaXhlZCgndHJhbnNmb3JtJyldID0gXCJyb3RhdGVYKDE4MGRlZylcIjtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCBcInN0b3BcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjbG9zZSAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5qYW1waW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIFwiZmluaXNoXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge1xuICAgICAgICAgICAgICAgIHJvdGF0ZVg6IFwiMTIwZGVnXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwXG4gICAgICAgICAgICAgICAgLCBiZWdpbjogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLCBjb21wbGV0ZTogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBvcGVuICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmphbXBpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmp1bXAoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmphbXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwgXCJmaW5pc2hcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7XG4gICAgICAgICAgICAgICAgcm90YXRlWDogXCIwZGVnXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwXG4gICAgICAgICAgICAgICAgLCBiZWdpbjogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLCBjb21wbGV0ZTogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjIwZGVnXCJ9LCAxNTApO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge3JvdGF0ZVg6IFwiMGRlZ1wifSwgMTI1KTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjEwZGVnXCJ9LCAyMDApO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge3JvdGF0ZVg6IFwiMGRlZ1wifSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOjE3NVxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmphbXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAganVtcCAoKSB7XG4gICAgICAgICAgICB0aGlzLmphbXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwgXCJmaW5pc2hcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIzNWRlZ1wifSwgMTUwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIDEyNSk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIyMGRlZ1wifSwgMjAwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIDE3NSk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIxNWRlZ1wifSwgMjUwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjI1XG4gICAgICAgICAgICAgICAgLCBjb21wbGV0ZTogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuamFtcGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgbGV0IHJlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpPT4gcmVzb2x2ZSgpKTtcbiAgICB9KTtcblxuICAgIHJlYWR5LnRoZW4oKCk9PntcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9icm93c2VyJyksIChwb3B1cCkgPT4ge1xuICAgICAgICAgICAgbmV3IFBvcHVwKHBvcHVwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9jb21tb24nKSwgKHBvcHVwKSA9PiB7XG4gICAgICAgICAgICBuZXcgUG9wdXAocG9wdXApO1xuICAgICAgICAgICAgaWYgKHBvcHVwLmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfb3BlbicpKXtcbiAgICAgICAgICAgICAgICBwb3B1cC5vcGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3NkZXNjIENsYXNzIHJlcHJlc2VudGluZyBmb3JtIHZhbGlkYXRpb25cbiAgICAgKiBAY2xhc3NcbiAgICAgKi9cblxuICAgIGNsYXNzIFZhbGlkYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3Rvcihmb3JtKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgICAgICAgICAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJub3ZhbGlkYXRlXCIsIFwibm92YWxpZGF0ZVwiKTtcbiAgICAgICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy52YWxpZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIGZvcm0udmFsaWRhdGUgPSB0aGlzLnZhbGlkYXRlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBmb3JtLmNsZWFyID0gdGhpcy5jbGVhci5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0ge1xuICAgICAgICAgICAgICAgIGVuOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBcIlJlcXVpcmVkIGZpZWxkXCJcbiAgICAgICAgICAgICAgICAgICAgLCBlbWFpbDogXCJXcm9uZyBlbWFpbCBmb3JtYXRcIlxuICAgICAgICAgICAgICAgICAgICAsIGVxdWFsOiBcIlBhc3N3b3JkIGZpZWxkcyBzaG91bGQgYmUgZXF1YWxcIlxuICAgICAgICAgICAgICAgICAgICAsIHVuZXF1YWw6IFwiTGFuZ3VhZ2VzIHNob3VsZG4ndCBiZSBlcXVhbFwiXG4gICAgICAgICAgICAgICAgICAgICwgdXJsOiBcIldyb25nIHVybCBmb3JtYXRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAsIHJ1OiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBcItCf0L7Qu9C1INC+0LHRj9C30LDRgtC10LvRjNC90L4g0LTQu9GPINC30LDQv9C+0LvQvdC10L3QuNGPXCJcbiAgICAgICAgICAgICAgICAgICAgLCBlbWFpbDogXCLQn9GA0L7QstC10YDRjNGC0LUg0YTQvtGA0LzQsNGCIGVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgLCBlcXVhbDogXCLQn9Cw0YDQvtC70Lgg0LTQvtC70LbQvdGLINGB0L7QstC/0LDQtNCw0YLRjFwiXG4gICAgICAgICAgICAgICAgICAgICwgdW5lcXVhbDogXCLQr9C30YvQutC4INC90LUg0LTQvtC70LbQvdGLINGB0L7QstC/0LDQtNCw0YLRjFwiXG4gICAgICAgICAgICAgICAgICAgICwgdXJsOiBcItCf0YDQvtCy0LXRgNGM0YLQtSDRhNC+0YDQvNCw0YIgVVJMXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlc2V0IGZvcm0gYW5kIGNsZWFyIGVycm9yc1xuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXIgKCkge1xuXG4gICAgICAgICAgICBsZXQgc2VsZWN0cyA9ICQodGhpcy5mb3JtKS5maW5kKCdzZWxlY3QnKVxuICAgICAgICAgICAgICAgICwgaW5kZXggPSBzZWxlY3RzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG5cbiAgICAgICAgICAgICAgICBpZih0eXBlb2Ygc2VsZWN0c1tpbmRleF0uc2VsZWN0MiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICQoc2VsZWN0c1tpbmRleF0pLnNlbGVjdDIoXCJ2YWxcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0c1tpbmRleF0uc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHNlbGVjdHNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3JBbGwoJ29wdGlvblt2YWx1ZV1bZGlzYWJsZWRdJyksIChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5mb3JtLnJlc2V0KCk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZvcm0tZXJyb3InKSxcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdmFsaWRdLCBbZGF0YS1pbnZhbGlkXScpO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGVycm9ycywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGZpZWxkcywgKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWxpZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmUgZXJyb3IgbWVzc2FnZSBhZnRlciBlbGVtZW50XG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCAtIGVsZW1lbnQsIGFmdGVyIHdoaWNoIHdlIHdpbGwgYWRkIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgLSBlcnJvciBtZXNzYWdlXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBwZSAtIGVycm9yIHR5cGVcbiAgICAgICAgICovXG4gICAgICAgIGFkZEVycm9yKGVsZW1lbnQsIG1lc3NhZ2UsIHR5cGUpIHtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZm9ybS1lcnJvcltkYXRhLXR5cGU9XCInICsgdHlwZSArICdcIl0nKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVycm9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnUCcpO1xuICAgICAgICAgICAgZXJyb3IuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobWVzc2FnZSkpO1xuICAgICAgICAgICAgZXJyb3IuY2xhc3NMaXN0LmFkZCgnZm9ybS1lcnJvcicpO1xuICAgICAgICAgICAgZXJyb3Iuc2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnLCB0eXBlKTtcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSBlcnJvciBtZXNzYWdlIG9mIHNvbWUgdHlwZSBhZnRlciBlbGVtZW50XG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCAtIGVsZW1lbnQsIGFmdGVyIHdoaWNoIGVycm9yIG1lc3NhZ2UgaXNcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cHBlIC0gZXJyb3IgdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXJFcnJvcihlbGVtZW50LCB0eXBlKSB7XG5cbiAgICAgICAgICAgIGxldCBlcnIgPSBlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZvcm0tZXJyb3JbZGF0YS10eXBlPVwiJyArIHR5cGUgKyAnXCJdJyk7XG4gICAgICAgICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVmFsaWRhdGUgZm9ybVxuICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIHN1Ym1pdCBldmVudFxuICAgICAgICAgKiBAdG9kbyBJbXBsZW1lbnQgbG9naW4gdmFsaWRhdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdmFsaWRhdGUoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT0gXCJ1bmRlZmluZWRcIiAmJiAhZXZlbnQuY3VycmVudFRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtcmVsb2FkJykpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdmFsaWQgPSB0cnVlLFxuICAgICAgICAgICAgICAgIG5leHQgPSBudWxsLFxuICAgICAgICAgICAgICAgIGVxdWFsX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1lcXVhbF0nKSxcbiAgICAgICAgICAgICAgICB1bmVxdWFsX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS11bmVxdWFsXScpLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbcmVxdWlyZWRdJyksXG4gICAgICAgICAgICAgICAgdXJsX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwidXJsXCJdJyksXG4gICAgICAgICAgICAgICAgZW1haWxfZmllbGRzID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJlbWFpbFwiXScpLFxuICAgICAgICAgICAgICAgIHVybF9yZWdleCA9IG5ldyBSZWdFeHAoXCJeKGh0dHB8aHR0cHN8ZnRwKVxcOi8vKFthLXpBLVowLTlcXC5cXC1dKyhcXDpbYS16QS1aMC05XFwuJmFtcDslXFwkXFwtXSspKkApKigoMjVbMC01XXwyWzAtNF1bMC05XXxbMC0xXXsxfVswLTldezJ9fFsxLTldezF9WzAtOV17MX18WzEtOV0pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFsxLTldfDApXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFsxLTldfDApXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFswLTldKXwoW2EtekEtWjAtOVxcLV0rXFwuKSpbYS16QS1aMC05XFwtXStcXC4oY29tfGVkdXxnb3Z8aW50fG1pbHxuZXR8b3JnfGJpenxhcnBhfGluZm98bmFtZXxwcm98YWVyb3xjb29wfG11c2V1bXxbYS16QS1aXXsyfSkpKFxcOlswLTldKykqKC8oJHxbYS16QS1aMC05XFwuXFwsXFw/XFwnXFxcXFxcKyZhbXA7JVxcJCNcXD1+X1xcLV0rKSkqJFwiLCBcImlcIiksXG4gICAgICAgICAgICAgICAgZW1haWxfcmVnZXggPSBuZXcgUmVnRXhwKFwiXihbYS16QS1aMC05X1xcLlxcLV0pK1xcQCgoW2EtekEtWjAtOVxcLV0pK1xcLikrKFthLXpBLVowLTldezIsNH0pKyRcIik7XG5cbiAgICAgICAgICAgIC8qIGNoZWNrIGVxdWFsIGZpZWxkcyAqL1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGVxdWFsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXF1YWwgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZXF1YWxcIikpO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlLnRyaW0oKSAhPSBlcXVhbC52YWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlbGVtZW50LCB0aGlzLm1lc3NhZ2VzW2RvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKV0uZXF1YWwsIFwiZXF1YWxcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsIFwiZXF1YWxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8qIGNoZWNrIHVuZXF1YWwgZmllbGRzICovXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodW5lcXVhbF9maWVsZHMsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHVuZXF1YWwgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdW5lcXVhbFwiKSk7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQub3B0aW9uc1tlbGVtZW50LnNlbGVjdGVkSW5kZXhdLnZhbHVlLnRyaW0oKSA9PSB1bmVxdWFsLm9wdGlvbnNbdW5lcXVhbC5zZWxlY3RlZEluZGV4XS52YWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlbGVtZW50LCB0aGlzLm1lc3NhZ2VzW2RvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKV0udW5lcXVhbCwgXCJ1bmVxdWFsXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJFcnJvcihlbGVtZW50LCBcInVuZXF1YWxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8qIGNoZWNrIHJlcXVpcmVkIGZpZWxkcyAqL1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHJlcXVpcmVkX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlbGVtZW50LCB0aGlzLm1lc3NhZ2VzW2RvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKV0ucmVxdWlyZWQsIFwicmVxdWlyZWRcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsICdyZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBjaGVjayB1cmwgZmllbGRzICovXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodXJsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoKGVsZW1lbnQudmFsdWUudHJpbSgpLmxlbmd0aCA+IDApICYmICh1cmxfcmVnZXgudGVzdChlbGVtZW50LnZhbHVlLnRyaW0oKSkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGVsZW1lbnQsIHRoaXMubWVzc2FnZXNbZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnbGFuZycpXS51cmwsICd1cmwnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRXJyb3IoZWxlbWVudCwgJ3VybCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBjaGVjayBlbWFpbCBmaWVsZHMgKi9cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChlbWFpbF9maWVsZHMsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKChlbGVtZW50LnZhbHVlLnRyaW0oKS5sZW5ndGggPiAwKSAmJiAoZW1haWxfcmVnZXgudGVzdChlbGVtZW50LnZhbHVlLnRyaW0oKSkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGVsZW1lbnQsIHRoaXMubWVzc2FnZXNbZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnbGFuZycpXS5lbWFpbCwgJ2VtYWlsJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsICdlbWFpbCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGxldCBhbGxfZmllbGRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZXF1YWxfZmllbGRzKS5jb25jYXQoXG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocmVxdWlyZWRfZmllbGRzKSxcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh1cmxfZmllbGRzKSxcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbWFpbF9maWVsZHMpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoYWxsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyID0gZWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnZhbGlkID0gZG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKFwiZGF0YS1pbnZhbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkLnZhbHVlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50YWdOYW1lID09IFwiU0VMRUNUXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcuc2V0QXR0cmlidXRlTm9kZShpbnZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5vZGUoaW52YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsaWQgPSBkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoXCJkYXRhLXZhbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YWxpZC52YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gXCJTRUxFQ1RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5uZXh0U2libGluZy5zZXRBdHRyaWJ1dGVOb2RlKHZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTm9kZSh2YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVycm9yc19jb3VudCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybV9lcnJvcicpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChlcnJvcnNfY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xuXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGxldCByZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHJlc29sdmUoKSk7XG4gICAgfSk7XG5cbiAgICByZWFkeS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgZm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJyk7XG4gICAgICAgIFtdLmZvckVhY2guY2FsbChmb3JtcywgKGZvcm0pID0+IHtcbiAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uKGZvcm0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuKGZ1bmN0aW9uICgpIHtcbiAgICBjbGFzcyBNZW51IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdGFydCBpbml0aWFsaXphdGlvbiBvbiBkb21sb2FkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICAgICAgbGV0IHJlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPSBcImxvYWRpbmdcIikgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKT0+IHJlc29sdmUoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlYWR5LnRoZW4odGhpcy5pbml0LmJpbmQodGhpcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRpbmcgZXZlbnRzIGFuZCBwcm9wZXJ0aWVzXG4gICAgICAgICAqL1xuICAgICAgICBpbml0ICgpIHtcblxuICAgICAgICAgICAgaWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luJykgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGJhY2tfYnV0dG9ucyA9ICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG9naW5fX2JhY2snKVxuICAgICAgICAgICAgICAgICwgbG9naW5fYnV0dG9ucyA9ICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG9naW5fX2xvZ2luLWJ1dHRvbiwgLmxvZ2luX3N1Y2Nlc3MgLmxvZ2luX19zdWJtaXQnKVxuICAgICAgICAgICAgICAgICwgbW9iaWxlX3BvcHVwX2J1dHRvbnMgPSAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudV9faW50ZXJwcmV0ZXIsIC5oZWFkZXJfX2ludGVycHJldGVyJyk7XG5cbiAgICAgICAgICAgIHRoaXMubWVudV9wb3B1cF9vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMubG9naW5fYnV0dG9uID0gICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX2xvZ2luJyk7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyX2J1dHRvbiA9ICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51X19yZWdpc3RlcicpO1xuXG4gICAgICAgICAgICB0aGlzLnN0ZXAxID0gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9yZWdpc3Rlci1zdGVwLTEnKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcDFfZm9ybSA9ICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3JlZ2lzdGVyLXN0ZXAtMSBmb3JtLmxvZ2luX19mb3JtJyk7XG4gICAgICAgICAgICB0aGlzLnN0ZXAyID0gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9yZWdpc3Rlci1zdGVwLTInKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcDJfZm9ybSA9ICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3JlZ2lzdGVyLXN0ZXAtMiBmb3JtLmxvZ2luX19mb3JtJyk7XG5cbiAgICAgICAgICAgIHRoaXMubW9iaWxlX3BvcHVwID0gICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX21vYmlsZScpO1xuICAgICAgICAgICAgdGhpcy5tb2JpbGVfcG9wdXBfY2xvc2UgPSAgICAgICB0aGlzLm1vYmlsZV9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlJyk7XG5cbiAgICAgICAgICAgIHRoaXMud3JhcHBlciA9ICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX3dyYXBwZXInKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyX3JlZ2lzdGVyX2J1dHRvbiA9ICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbGlua19yZWdpc3RlcicpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJfbG9naW5fYnV0dG9uID0gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19saW5rX2xvZ2luJyk7XG4gICAgICAgICAgICB0aGlzLnJlY292ZXJ5X2J1dHRvbiA9ICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9fcGFzc3dvcmQtcmVjb3ZlcnknKTtcbiAgICAgICAgICAgIHRoaXMubGlnaHRib3ggPSAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keT4ubGlnaHRib3gnKTtcbiAgICAgICAgICAgIHRoaXMubG9naW5fcG9wdXAgPSAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX2xvZ2luJyk7XG4gICAgICAgICAgICB0aGlzLnJlY292ZXJ5ID0gICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9yZWNvdmVyeScpO1xuICAgICAgICAgICAgdGhpcy5wYXNzd29yZCA9ICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fcGFzc3dvcmQnKTtcbiAgICAgICAgICAgIHRoaXMucmVjb3ZlcnlfZm9ybSA9ICAgICAgICAgICAgdGhpcy5yZWNvdmVyeS5xdWVyeVNlbGVjdG9yKCcubG9naW5fX2Zvcm0nKTtcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRfZm9ybSA9ICAgICAgICAgICAgdGhpcy5wYXNzd29yZC5xdWVyeVNlbGVjdG9yKCcubG9naW5fX2Zvcm0nKTtcblxuICAgICAgICAgICAgdGhpcy5lcnJvcl9tZXNzYWdlID0gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWxlcnRfZm9ybS1zZW5kLWZhaWwnKTtcblxuICAgICAgICAgICAgdGhpcy5lbWFpbCA9ICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fZW1haWwnKTtcbiAgICAgICAgICAgIHRoaXMuc3VjY2VzcyA9ICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3N1Y2Nlc3MnKTtcblxuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX29wZW4nKTtcbiAgICAgICAgICAgIHRoaXMubGFzdCA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzLmxvZ2luX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlbkxvZ2luRm9ybS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMucmVjb3ZlcnlfYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuUmVjb3ZlcnkuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLmxpZ2h0Ym94LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZUFsbC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJfYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuUmVnaXN0ZXIuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcl9sb2dpbl9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5Mb2dpbk91dGVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJfcmVnaXN0ZXJfYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuUmVnaXN0ZXJPdXRlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMubW9iaWxlX3BvcHVwX2Nsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZU1vYmlsZVBvcHVwLmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICB0aGlzLnJlY292ZXJ5X2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5zZW5kRGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRfZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnNlbmREYXRhLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5zdGVwMV9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMub3Blbk5leHQuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLnN0ZXAyX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5zZW5kRGF0YS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVwb3NQb3B1cC5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgJCgnc2VsZWN0Lmxhbmd1YWdlX2Zyb20nKS5zZWxlY3QyKCk7XG4gICAgICAgICAgICAkKCdzZWxlY3QubGFuZ3VhZ2VfdG8nKS5zZWxlY3QyKCk7XG4gICAgICAgICAgICAkKCdzZWxlY3QubGFuZ3VhZ2VfbG9jYXRpb24nKS5zZWxlY3QyKCk7XG5cbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VfZnJvbSA9ICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGFuZ3VhZ2VfZnJvbScpO1xuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZV90byA9ICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sYW5ndWFnZV90bycpO1xuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZV9sb2NhdGlvbiA9ICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sYW5ndWFnZV9sb2NhdGlvbicpO1xuXG4gICAgICAgICAgICAkKFwiLmxvZ2luIHNlbGVjdC5sYW5ndWFnZV9mcm9tXCIpLm9uKFwiY2hhbmdlXCIsIHRoaXMuY2hhbmdlRnJvbUxhbmd1YWdlLmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxvZ2luJyksIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG1vYmlsZV9wb3B1cF9idXR0b25zLCAoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuTW9iaWxlUG9wdXAuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGJhY2tfYnV0dG9ucywgKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZ29iYWNrLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChsb2dpbl9idXR0b25zLCAoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuTG9naW5Jbm5lci5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLldlYlJUQ1N1cHBvcnQgPSAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnbm8tcGVlcmNvbm5lY3Rpb24nKTtcblxuXG4gICAgICAgICAgICBpZighdGhpcy5XZWJSVENTdXBwb3J0KSB7XG5cbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZm9ybS5sb2dpbl9fZm9ybSBpbnB1dCwgZm9ybS5sb2dpbl9fZm9ybSBidXR0b24sIGZvcm0ubG9naW5fX2Zvcm0gc2VsZWN0JyksIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIixcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtLmxvZ2luX19mb3JtJyksIChmb3JtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uY2xvc2VzdCgnLmxvZ2luJykucXVlcnlTZWxlY3RvcignLnBvcHVwX2Jyb3dzZXInKS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9icm93c2VyJyksIChwb3B1cCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dQb3B1cChwb3B1cCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaGFuZ2VGcm9tTGFuZ3VhZ2UgKCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlX2Zyb20gPSB0aGlzLmxhbmd1YWdlX2Zyb20udmFsdWVcbiAgICAgICAgICAgICAgICAsIHZhbHVlX3RvID0gdGhpcy5sYW5ndWFnZV90by52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlX2Zyb20gPT09IHZhbHVlX3RvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZV90by5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAkKHRoaXMubGFuZ3VhZ2VfdG8pLnNlbGVjdDIoXCJ2YWxcIiwgXCJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbCh0aGlzLmxhbmd1YWdlX3RvLnF1ZXJ5U2VsZWN0b3JBbGwoJ29wdGlvblt2YWx1ZV1bZGlzYWJsZWRdJyksICh0b19lbmFibGUpPT57XG4gICAgICAgICAgICAgICAgdG9fZW5hYmxlLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodGhpcy5sYW5ndWFnZV90by5xdWVyeVNlbGVjdG9yQWxsKCdvcHRpb25bdmFsdWU9XCInICsgdmFsdWVfZnJvbSArICdcIl0nKSwgKHRvX2Rpc2FibGUpPT57XG4gICAgICAgICAgICAgICAgdG9fZGlzYWJsZS5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaW5lZmZpY2llbnQsIGJ1dCBpdCBsb29rIGxpdGUgdGhlcmUgYXJlIG5vIG90aGVyIHdheSBjb3JyZWN0bHkgZGlzYWJsZS9lbmFibGUgc2VsZWN0MiBkeW5hbWljYWxseVxuICAgICAgICAgICAgJCh0aGlzLmxhbmd1YWdlX3RvKS5zZWxlY3QyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcGVuTmV4dCAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuc3RlcDFfZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBmcm9tOiAkKCdzZWxlY3QubGFuZ3VhZ2VfZnJvbScpLnNlbGVjdDIoXCJ2YWxcIilcbiAgICAgICAgICAgICAgICAsIHRvOiAkKCdzZWxlY3QubGFuZ3VhZ2VfdG8nKS5zZWxlY3QyKFwidmFsXCIpXG4gICAgICAgICAgICAgICAgLCBsb2NhdGlvbjogJCgnc2VsZWN0Lmxhbmd1YWdlX2xvY2F0aW9uJykuc2VsZWN0MihcInZhbFwiKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RlcDFfZm9ybS52YWxpZGF0ZSgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKHRoaXMuc3RlcDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVwb3NQb3B1cCAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmKCF0aGlzLm1lbnVfcG9wdXBfb3Blbil7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tb2JpbGVfcG9wdXAuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKCd0cmFuc2Zvcm0nKV0gPSBcInRyYW5zbGF0ZVkoXCIgKyB0aGlzLm1vYmlsZV9wb3B1cC5vZmZzZXRIZWlnaHQgKyBcInB4KVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xvc2VNb2JpbGVQb3B1cCAoKSB7XG4gICAgICAgICAgICBpZighdGhpcy5tZW51X3BvcHVwX29wZW4pe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWVudV9wb3B1cF9vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwLCBcInN0b3BcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cCwge3RyYW5zbGF0ZVk6IDB9LCAyNTApO1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cF9idXR0b24sIFwic3RvcFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwX2J1dHRvbiwge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgLCBiZWdpbjogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9iaWxlX3BvcHVwX2J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb3Blbk1vYmlsZVBvcHVwICgpIHtcbiAgICAgICAgICAgIGlmKHRoaXMubWVudV9wb3B1cF9vcGVuKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1lbnVfcG9wdXBfb3BlbiA9IHRydWU7XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwLCBcInN0b3BcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cCwge3RyYW5zbGF0ZVk6IHRoaXMubW9iaWxlX3BvcHVwLm9mZnNldEhlaWdodCArIFwicHhcIn0sIDI1MCk7XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwX2J1dHRvbiwgXCJzdG9wXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXBfYnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICAsIGNvbXBsZXRlOiAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2JpbGVfcG9wdXBfYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNob3dQb3B1cCAocG9wdXApIHtcbiAgICAgICAgICAgIGlmIChwb3B1cC5zaG93ICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgcG9wdXAuc2hvdygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuc2hvd1BvcHVwLmJpbmQodGhpcywgcG9wdXApLCA1MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNjcm9sbCB0byBmaXJzdCBzbGlkZSBhbmQgb3BlbiBsb2dpbiBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuTG9naW5PdXRlciAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLm1vdmVUbygxLCAwKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luX2J1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgfSwgODAwKVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTY3JvbGwgdG8gZmlyc3Qgc2xpZGUgYW5kIG9wZW4gcmVnaXN0ZXIgZm9ybVxuICAgICAgICAgKi9cbiAgICAgICAgb3BlblJlZ2lzdGVyT3V0ZXIgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5tb3ZlVG8oMSwgMCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3Rlcl9idXR0b24uY2xpY2soKTtcbiAgICAgICAgICAgIH0sIDgwMClcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2VuZCByZWdpc3RyYXRpb24gZGF0YSBhbmQgc2hvdyBtZXNzYWdlXG4gICAgICAgICAqL1xuICAgICAgICBzZW5kRGF0YSAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsZXQgZm9ybSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgICAgICAgIGlmIChmb3JtLnZhbGlkYXRlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IERPTkUgPSA0XG4gICAgICAgICAgICAgICAgLCBPSyA9IDIwMFxuICAgICAgICAgICAgICAgICwgbWVzc2FnZVxuICAgICAgICAgICAgICAgICwgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgICAgICAgICAgICAgICAsIGxvYWRlZFxuICAgICAgICAgICAgICAgICwgaW5kZXhcbiAgICAgICAgICAgICAgICAsIGRhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGVwMV9kYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5hcHBlbmQoJ2Zyb20nLCAgICAgdGhpcy5zdGVwMV9kYXRhLmZyb20pO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZCgndG8nLCAgICAgICB0aGlzLnN0ZXAxX2RhdGEudG8pO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZCgnbG9jYXRpb24nLCB0aGlzLnN0ZXAxX2RhdGEubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZXAxX2RhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxvYWRlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCBmb3JtLmdldEF0dHJpYnV0ZSgnYWN0aW9uJykpO1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9Pnt0aGlzLmNsZWFyQWxsKCk7fSwgNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gT0spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBwYXJzZUludCh4aHIuc3RhdHVzLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB4aHIuc3RhdHVzVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZm9ybS5oYXNBdHRyaWJ1dGUoJ2RhdGEtY2hlY2snKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gdGhpcy5zaG93Q2hlY2tNZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHRoaXMuc2hvd1N1Y2Nlc3NNZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbG9hZGVkLnRoZW4obWVzc2FnZSkuY2F0Y2godGhpcy5zaG93RXJyb3JNZXNzYWdlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIC8vIGxvYWRlZC50aGVuKG1lc3NhZ2UpLmNhdGNoKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwMURhdGEgPSBudWxsO1xuXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3I6ICcsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgY2hlY2sgZW1haWwgbWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0NoZWNrTWVzc2FnZSAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKHRoaXMuZW1haWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IHN1Y2Nlc3MgbWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1N1Y2Nlc3NNZXNzYWdlICgpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdCA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLnN1Y2Nlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGxvZ2luXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuTG9naW5Jbm5lciAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKHRoaXMubG9naW5fcG9wdXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IG1lc3NhZ2VcbiAgICAgICAgICovXG4gICAgICAgIHNob3dFcnJvck1lc3NhZ2UgKHJlYXNvbikge1xuICAgICAgICAgICAgdGhpcy5sYXN0ID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZWFzb24uY29kZSwgJ1Jlc3BvbmNlIHN0YXR1cyBjb2RlOiAnICsgcmVhc29uLmNvZGUgKyAnLiAnICsgcmVhc29uLm1lc3NhZ2UgKyAnLicpO1xuICAgICAgICAgICAgdGhpcy5lcnJvcl9tZXNzYWdlLm9wZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiBsYXN0IHBhZ2VcbiAgICAgICAgICovXG4gICAgICAgIGdvYmFjayAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgZW1haWwgc2VudCB3YXJuaW5nXG4gICAgICAgICAqL1xuICAgICAgICBlbWFpbEhhdmVTZW5kICgpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdCA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLmVtYWlsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiByZWdpc3RlciBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuUmVnaXN0ZXJJbm5lciAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKHRoaXMuc3RlcDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIHJlZ2lzdGVyIGZvcm1cbiAgICAgICAgICovXG4gICAgICAgIG9wZW5SZWdpc3RlciAoKSB7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEFsbG93U2Nyb2xsaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0S2V5Ym9hcmRTY3JvbGxpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgICBsZXQgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5zdGVwMSwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGVwMTtcblxuICAgICAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0Ym94LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmxpZ2h0Ym94LCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gcmVjb3ZlcnkgZm9ybXNcbiAgICAgICAgICovXG4gICAgICAgIG9wZW5SZWNvdmVyeSAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZighdGhpcy5XZWJSVENTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLnJlY292ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiByZWNvdmVyeSBmb3Jtc1xuICAgICAgICAgKiBAcGFyYW0gZm9ybSB7bm9kZX0gRm9ybSB5b3Ugd2FudCB0byBvcGVuXG4gICAgICAgICAqIEBwYXJhbSBiYWNrIHtub2RlfSBGb3JtIHdoaWNoIHlvdSB3YW50IHRvIG9wZW4gd2hlbiB1c2VyIHByZXNzIGJhY2ssIGJ5IGRlZmF1bHQg4oCUwqBsYXN0IGZvcm0gb3BlbmVkXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuRm9ybSAocG9wdXAsIGRvbnRfc2F2ZSkge1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyhmYWxzZSk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEtleWJvYXJkU2Nyb2xsaW5nKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIGZvcm0gPSB0aGlzLmN1cnJlbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xuXG4gICAgICAgICAgICAvLyAkKCdzZWxlY3QubGFuZ3VhZ2VfZnJvbScpLnNlbGVjdDIoXCJ2YWxcIiwgXCJcIik7XG4gICAgICAgICAgICAvLyAkKCdzZWxlY3QubGFuZ3VhZ2VfdG8nKS5zZWxlY3QyKFwidmFsXCIsIFwiXCIpO1xuICAgICAgICAgICAgLy8gJCgnc2VsZWN0Lmxhbmd1YWdlX2xvY2F0aW9uJykuc2VsZWN0MihcInZhbFwiLCBcIlwiKTtcbiAgICAgICAgICAgIC8vIGlmICgoZm9ybSAhPSBudWxsKSAmJiAodHlwZW9mIGZvcm0uY2xlYXIgIT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgICAgICAvLyAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgLy8gICAgICAgICBpZiAoZm9ybSE9bnVsbCkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgZm9ybS5jbGVhcigpO1xuICAgICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwb3B1cCA9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMubGFzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcG9wdXAgPSB0aGlzLmxhc3QucG9wKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwb3B1cCA9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMubGFzdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvbnRfc2F2ZSAhPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0LnB1c2godGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZm9ybSA9IHBvcHVwLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcbiAgICAgICAgICAgIC8vIGlmIChmb3JtICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICAvLyAgICAgICAgIGlmIChmb3JtIT1udWxsKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBmb3JtLmNsZWFyKCk7XG4gICAgICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICB9LCA1MDApO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBsZXQgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAtIHRoaXMuY3VycmVudC5vZmZzZXRXaWR0aCArIFwicHhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMuY3VycmVudCwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkocG9wdXAsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHBvcHVwO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZSBhbGwgZm9ybXNcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlQWxsICgpIHtcblxuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyh0cnVlKTtcbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0S2V5Ym9hcmRTY3JvbGxpbmcodHJ1ZSk7XG5cbiAgICAgICAgICAgIGxldCBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IC0gdGhpcy5jdXJyZW50Lm9mZnNldFdpZHRoICsgXCJweFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5jdXJyZW50LCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlnaHRib3guc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5saWdodGJveCwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e3RoaXMuY2xlYXJBbGwoKTt9LCA1MDApO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJBbGwgKCkge1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0nKSwgKGZvcm0pID0+IHtcbiAgICAgICAgICAgICAgICBmb3JtLmNsZWFyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiBsb2dpbiBwb3B1cFxuICAgICAgICAgKi9cbiAgICAgICAgb3BlbkxvZ2luRm9ybSAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0QWxsb3dTY3JvbGxpbmcoZmFsc2UpO1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRLZXlib2FyZFNjcm9sbGluZyhmYWxzZSk7XG5cbiAgICAgICAgICAgIGxldCBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmxvZ2luX3BvcHVwLCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLmxvZ2luX3BvcHVwO1xuXG4gICAgICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlnaHRib3guc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubGlnaHRib3gsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5ldyBNZW51O1xufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuKGZ1bmN0aW9uKCkge1xuICAgIHdpbmRvdy5tb2JpbGVBbmRUYWJsZXRjaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2sgPSBmYWxzZTtcbiAgICAgICAgKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGlmICgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2kudGVzdChhKSB8fCAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KGEuc3Vic3RyKDAsIDQpKSkgY2hlY2sgPSB0cnVlXG4gICAgICAgIH0pKG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmEpO1xuICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgfTtcblxuICAgIHdpbmRvdy5pc01vYmlsZSA9IHtcbiAgICAgICAgQW5kcm9pZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBCbGFja0JlcnJ5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAvQmxhY2tCZXJyeS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGlPUzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gL2lQaG9uZXxpUGFkfGlQb2QvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBXaW5kb3dzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAvSUVNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBhbnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIChpc01vYmlsZS5BbmRyb2lkKCkgfHwgaXNNb2JpbGUuQmxhY2tCZXJyeSgpIHx8IGlzTW9iaWxlLmlPUygpIHx8IGlzTW9iaWxlLldpbmRvd3MoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY2xhc3MgTGF5b3V0IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdGFydCBpbml0aWFsaXphdGlvbiBvbiBkb21sb2FkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBsZXQgcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhZHkudGhlbih0aGlzLmluaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmlzTW9iaWxlLkFuZHJvaWQoKSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdhbmRyb2lkJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5pc01vYmlsZS5pT1MoKSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpb3MnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm1vYmlsZUFuZFRhYmxldGNoZWNrKCkpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgndW5rbm93bi1tb2JpbGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2Rlc2t0b3AnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXcgTGF5b3V0O1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==